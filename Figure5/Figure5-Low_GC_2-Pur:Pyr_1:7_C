import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import mannwhitneyu

plt.rcdefaults()

plt.rcParams['figure.figsize']     = 21, 15      # global figure size in inches
plt.rcParams['xtick.labelsize']    = 65          # x‐tick font size
plt.rcParams['ytick.labelsize']    = 65          # y‐tick font size
plt.rcParams['ytick.right']        = False       # disable right ticks
plt.rcParams['ytick.labelright']   = False       # disable right tick labels
plt.rcParams['ytick.left']         = True        # enable left ticks
plt.rcParams['ytick.labelleft']    = True        # enable left tick labels
plt.rcParams.update({'figure.autolayout': False})
plt.rcParams['axes.linewidth']     = 5           # axis spine line width
plt.rcParams['font.family']        = 'Arial'     # global font family

# Axis title & plot title styling
plt.rcParams['axes.labelsize']     = 70          # axis label font size
plt.rcParams['axes.labelweight']   = 'bold'      # axis label weight
plt.rcParams['axes.titlesize']     = 80          # plot title font size
plt.rcParams['axes.titleweight']   = 'bold'      # plot title weight

# Read CSV and extract last timepoint values
def read_and_extract_last(csv_path):
    df = pd.read_csv(csv_path)
    time_cols = sorted(
        [c for c in df.columns if c.startswith('time_')],
        key=lambda c: int(c.split('_', 1)[1])
    )
    last_col = time_cols[-1]
    return (
        [
            {'file': r['file'], 'group': r['group'], 'last_value': float(r[last_col])}
            for _, r in df.iterrows()
        ],
        last_col
    )

# Plot group comparison of last values
def plot_group_last(results, last_col,
                    bar_colors=('C0', 'C1'),
                    dot_colors=('C1', 'C0'), jitter_width=0.15, figsize=(12,15), dpi=300):
    df_vals = pd.DataFrame(results)
    groups  = df_vals['group'].unique()
    means   = df_vals.groupby('group')['last_value'].mean()
    stds    = df_vals.groupby('group')['last_value'].std()
    x       = np.arange(len(groups))

    fig, ax = plt.subplots(figsize=figsize, dpi=dpi)

    ax.bar(
        x, means.values,
        yerr=stds.values,
        color=bar_colors,
        linewidth=0,
        error_kw={'elinewidth': 8, 'capsize': 15, 'capthick': 8}
    )

    # — Scatter individual points
    for i, grp in enumerate(groups):
        vals = df_vals.loc[df_vals['group'] == grp, 'last_value'].values
        n    = len(vals)
        offsets = np.linspace(-jitter_width, jitter_width, n) if n > 1 else [0]
        ax.scatter(
            x[i] + offsets, vals,
            color=dot_colors[i],
            s=400,
            linewidth=8,
            edgecolors=dot_colors[i]
        )

    # — Labels & title
    ax.set_xticks(x)
    ax.set_xticklabels(groups, rotation=0, ha='center')
    ax.tick_params(axis='x', pad=20)
    ax.set_ylabel(f"Intensity at 17h (n.u)")

    # — Give room for sig‐bar
    max_val = df_vals['last_value'].max()
    ax.set_ylim(0, max_val * 1.4)
    
    ax.yaxis.get_offset_text().set_visible(False)

    # — Mann-Whitney U test + significance bar
    if len(groups) == 2:
        d1, d2 = [
            df_vals.loc[df_vals['group'] == g, 'last_value']
            for g in groups
        ]
        u_stat, p_val = mannwhitneyu(d1, d2, alternative="two-sided")

        # determine stars
        if   p_val < 0.001: sig = '***'
        elif p_val < 0.01:  sig = '**'
        elif p_val < 0.05:  sig = '*'
        else:               sig = 'ns'

        # draw bar + stars
        y  = max_val * 1.1
        h  = max_val * 0.05
        ax.plot(
            [x[0], x[0], x[1], x[1]],
            [y, y+h, y+h, y],
            lw=8, c='black'
        )
        ax.text(
            (x[0] + x[1]) / 2, y + h,
            sig,
            ha='center', va='bottom',
            fontsize=100,
            fontweight='bold'
        )

        # print results
        print(f"Mann-Whitney U test: U = {u_stat:.3f}, p = {p_val:.5f} ({sig})")
        print("→ Significant difference." if p_val < 0.05 else "→ No significant difference.")
    else:
        print("Mann-Whitney U test not performed: need exactly two groups.")

    plt.show()

if __name__ == '__main__':
    csv_file = 'in_vivo_LowGC2_PurPyr17C.csv'
    if not os.path.exists(csv_file):
        raise FileNotFoundError(f"CSV file '{csv_file}' not found.")
    results, last_col = read_and_extract_last(csv_file)
    plot_group_last(
        results, last_col,
        bar_colors=('#FFB100','#9CBF22'),
        dot_colors=('#FF8300','#2CA02C'),
        figsize= (23,15),
        jitter_width=0.15
    )
